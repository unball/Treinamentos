// Generated by gencpp from file treinamento/mymessage.msg
// DO NOT EDIT!


#ifndef TREINAMENTO_MESSAGE_MYMESSAGE_H
#define TREINAMENTO_MESSAGE_MYMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace treinamento
{
template <class ContainerAllocator>
struct mymessage_
{
  typedef mymessage_<ContainerAllocator> Type;

  mymessage_()
    : impar(0.0)
    , par(0.0)  {
    }
  mymessage_(const ContainerAllocator& _alloc)
    : impar(0.0)
    , par(0.0)  {
  (void)_alloc;
    }



   typedef float _impar_type;
  _impar_type impar;

   typedef float _par_type;
  _par_type par;





  typedef boost::shared_ptr< ::treinamento::mymessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::treinamento::mymessage_<ContainerAllocator> const> ConstPtr;

}; // struct mymessage_

typedef ::treinamento::mymessage_<std::allocator<void> > mymessage;

typedef boost::shared_ptr< ::treinamento::mymessage > mymessagePtr;
typedef boost::shared_ptr< ::treinamento::mymessage const> mymessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::treinamento::mymessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::treinamento::mymessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace treinamento

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'treinamento': ['/home/luiz/Treinamento-ROS/src/treinamento/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::treinamento::mymessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::treinamento::mymessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::treinamento::mymessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::treinamento::mymessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::treinamento::mymessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::treinamento::mymessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::treinamento::mymessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "572be5cba3decd7de0c8c159cd353f2c";
  }

  static const char* value(const ::treinamento::mymessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x572be5cba3decd7dULL;
  static const uint64_t static_value2 = 0xe0c8c159cd353f2cULL;
};

template<class ContainerAllocator>
struct DataType< ::treinamento::mymessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "treinamento/mymessage";
  }

  static const char* value(const ::treinamento::mymessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::treinamento::mymessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 impar\n\
float32 par\n\
";
  }

  static const char* value(const ::treinamento::mymessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::treinamento::mymessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.impar);
      stream.next(m.par);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mymessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::treinamento::mymessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::treinamento::mymessage_<ContainerAllocator>& v)
  {
    s << indent << "impar: ";
    Printer<float>::stream(s, indent + "  ", v.impar);
    s << indent << "par: ";
    Printer<float>::stream(s, indent + "  ", v.par);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TREINAMENTO_MESSAGE_MYMESSAGE_H
